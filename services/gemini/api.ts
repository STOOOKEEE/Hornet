/**
 * Service API pour Gemini (Google AI)
 * Documentation: https://ai.google.dev/docs
 */

import { Pool } from '../defillama/types';
import {
  GeminiConfig,
  GeminiRequest,
  GeminiResponse,
  GeminiMessage,
  PoolAnalysisRequest,
  PoolAnalysisResponse,
  PoolRecommendation,
} from './types';

const DEFAULT_MODEL = 'gemini-2.5-flash';
const API_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models';

export class GeminiAPI {
  private apiKey: string;
  private model: string;

  constructor(config: GeminiConfig) {
    this.apiKey = config.apiKey;
    this.model = config.model || DEFAULT_MODEL;
  }

  /**
   * Envoie une requ√™te √† l'API Gemini avec timeout
   */
  private async sendRequest(prompt: string, systemInstruction?: string): Promise<string> {
    try {
      const contents: GeminiMessage[] = [];
      
      if (systemInstruction) {
        contents.push({
          role: 'user' as const,
          parts: [{ text: systemInstruction }],
        });
        contents.push({
          role: 'model' as const,
          parts: [{ text: 'Compris, je vais suivre ces instructions.' }],
        });
      }
      
      contents.push({
        role: 'user' as const,
        parts: [{ text: prompt }],
      });

      const request: GeminiRequest = {
        contents,
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        },
      };

      const url = `${API_BASE_URL}/${this.model}:generateContent?key=${this.apiKey}`;

      // Cr√©er un timeout de 60 secondes
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 60000);

      try {
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(request),
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(
            `Erreur API Gemini: ${response.status} ${response.statusText} - ${JSON.stringify(errorData)}`
          );
        }

        const data: GeminiResponse = await response.json();
        
        // Log d√©taill√© pour debug
        console.log('üì• R√©ponse Gemini re√ßue:', JSON.stringify(data, null, 2).substring(0, 500));
        
        if (!data.candidates || data.candidates.length === 0) {
          console.error('‚ùå Aucun candidat dans la r√©ponse:', data);
          throw new Error('Aucune r√©ponse g√©n√©r√©e par Gemini');
        }

        const candidate = data.candidates[0];
        console.log('üìã Premier candidat:', JSON.stringify(candidate, null, 2).substring(0, 500));
        
        // V√©rifier si la r√©ponse a √©t√© bloqu√©e par les safety filters
        if (candidate.finishReason && candidate.finishReason !== 'STOP') {
          console.error('‚ö†Ô∏è R√©ponse bloqu√©e:', candidate.finishReason);
          if (candidate.safetyRatings) {
            console.error('üõ°Ô∏è Safety ratings:', candidate.safetyRatings);
          }
          throw new Error(`R√©ponse Gemini bloqu√©e: ${candidate.finishReason}`);
        }

        if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) {
          console.error('‚ùå Contenu manquant dans le candidat:', candidate);
          throw new Error('R√©ponse Gemini invalide: contenu manquant');
        }

        return candidate.content.parts[0].text;
      } catch (fetchError) {
        clearTimeout(timeoutId);
        if (fetchError instanceof Error && fetchError.name === 'AbortError') {
          throw new Error('Timeout: La requ√™te Gemini a pris trop de temps (>60s)');
        }
        throw fetchError;
      }
    } catch (error) {
      console.error('Erreur lors de la requ√™te Gemini:', error);
      throw error;
    }
  }

  /**
   * Analyse les pools et recommande les meilleurs
   */
  async analyzePools(request: PoolAnalysisRequest): Promise<PoolAnalysisResponse> {
    const { pools, criteria, customPrompt } = request;

    // Pr√©parer les donn√©es des pools pour Gemini
    const poolsData = pools.map(pool => ({
      id: pool.pool,
      project: pool.project,
      symbol: pool.symbol,
      chain: pool.chain,
      apy: pool.apy,
      apyBase: pool.apyBase,
      apyReward: pool.apyReward,
      tvlUsd: pool.tvlUsd,
      stablecoin: pool.stablecoin,
      ilRisk: pool.ilRisk,
      exposure: pool.exposure,
      rewardTokens: pool.rewardTokens,
    }));

    // Construire le prompt syst√®me
    const systemInstruction = `Tu es un expert en finance d√©centralis√©e (DeFi) sp√©cialis√© dans l'analyse des pools de liquidit√© et l'optimisation des rendements. 
Tu dois analyser les pools fournis et recommander les meilleurs en fonction des crit√®res donn√©s.

R√©ponds TOUJOURS au format JSON suivant (sans markdown, juste le JSON brut):
{
  "recommendations": [
    {
      "poolId": "id du pool",
      "score": 0-100,
      "reasoning": "explication d√©taill√©e",
      "pros": ["avantage 1", "avantage 2"],
      "cons": ["inconv√©nient 1", "inconv√©nient 2"],
      "riskLevel": "low|medium|high"
    }
  ],
  "summary": "r√©sum√© g√©n√©ral de l'analyse",
  "marketInsights": "insights sur le march√© actuel",
  "warnings": ["avertissement 1", "avertissement 2"]
}`;

    let userPrompt = customPrompt || 'Analyse ces pools de liquidit√© et recommande les 5 meilleurs pour maximiser le yield.';
    
    // Ajouter les crit√®res au prompt
    if (criteria) {
      userPrompt += '\n\nCrit√®res √† consid√©rer:';
      if (criteria.riskTolerance) {
        userPrompt += `\n- Tol√©rance au risque: ${criteria.riskTolerance}`;
      }
      if (criteria.preferStablecoins) {
        userPrompt += '\n- Pr√©f√©rence pour les stablecoins';
      }
      if (criteria.minTvl) {
        userPrompt += `\n- TVL minimum: $${criteria.minTvl.toLocaleString()}`;
      }
      if (criteria.preferredChains && criteria.preferredChains.length > 0) {
        userPrompt += `\n- Cha√Ænes pr√©f√©r√©es: ${criteria.preferredChains.join(', ')}`;
      }
      if (criteria.investmentAmount) {
        userPrompt += `\n- Montant d'investissement: $${criteria.investmentAmount.toLocaleString()}`;
      }
    }

    userPrompt += `\n\nVoici les donn√©es des pools (${pools.length} pools):\n${JSON.stringify(poolsData, null, 2)}`;

    const response = await this.sendRequest(userPrompt, systemInstruction);

    // Parser la r√©ponse JSON
    try {
      // Nettoyer le contenu pour extraire le JSON
      let jsonContent = response.trim();
      
      // Retirer les balises markdown si pr√©sentes
      if (jsonContent.startsWith('```json')) {
        jsonContent = jsonContent.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      } else if (jsonContent.startsWith('```')) {
        jsonContent = jsonContent.replace(/```\n?/g, '');
      }

      const parsed = JSON.parse(jsonContent);

      // Valider la structure de la r√©ponse
      if (!parsed.recommendations || !Array.isArray(parsed.recommendations)) {
        throw new Error('La r√©ponse ne contient pas de tableau de recommandations valide');
      }

      // Enrichir les recommandations avec les objets Pool complets
      const recommendations: PoolRecommendation[] = parsed.recommendations.map((rec: any) => {
        if (!rec.poolId) {
          throw new Error('Recommandation sans poolId');
        }
        
        const pool = pools.find(p => p.pool === rec.poolId);
        if (!pool) {
          console.warn(`Pool ${rec.poolId} non trouv√© dans la liste des pools`);
          throw new Error(`Pool ${rec.poolId} non trouv√©`);
        }
        
        return {
          pool,
          score: rec.score || 0,
          reasoning: rec.reasoning || 'Aucune explication fournie',
          pros: Array.isArray(rec.pros) ? rec.pros : [],
          cons: Array.isArray(rec.cons) ? rec.cons : [],
          riskLevel: rec.riskLevel || 'medium',
        };
      });

      return {
        recommendations,
        summary: parsed.summary || 'Aucun r√©sum√© disponible',
        marketInsights: parsed.marketInsights || 'Aucun insight disponible',
        warnings: Array.isArray(parsed.warnings) ? parsed.warnings : [],
        rawResponse: response,
      };
    } catch (error) {
      console.error('Erreur lors du parsing de la r√©ponse Gemini:', error);
      console.error('Contenu re√ßu (premiers 500 caract√®res):', response.substring(0, 500));
      
      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
      throw new Error(`Impossible de parser la r√©ponse de Gemini: ${errorMessage}. V√©rifiez que l'API retourne bien du JSON valide.`);
    }
  }

  /**
   * Compare deux pools sp√©cifiques
   */
  async comparePools(pool1: Pool, pool2: Pool): Promise<string> {
    const systemInstruction = `Tu es un expert en DeFi. Compare ces deux pools de liquidit√© et explique lequel est le meilleur et pourquoi.`;
    
    const userPrompt = `Compare ces deux pools:

Pool 1:
- Projet: ${pool1.project}
- Symbole: ${pool1.symbol}
- Chain: ${pool1.chain}
- APY: ${pool1.apy}%
- TVL: $${pool1.tvlUsd.toLocaleString()}
- Stablecoin: ${pool1.stablecoin ? 'Oui' : 'Non'}

Pool 2:
- Projet: ${pool2.project}
- Symbole: ${pool2.symbol}
- Chain: ${pool2.chain}
- APY: ${pool2.apy}%
- TVL: $${pool2.tvlUsd.toLocaleString()}
- Stablecoin: ${pool2.stablecoin ? 'Oui' : 'Non'}

Donne une analyse d√©taill√©e et une recommandation.`;

    return await this.sendRequest(userPrompt, systemInstruction);
  }

  /**
   * Obtient des insights sur le march√© DeFi
   */
  async getMarketInsights(pools: Pool[]): Promise<string> {
    const systemInstruction = `Tu es un analyste DeFi expert. Analyse les tendances du march√© bas√©es sur les pools fournis.`;
    
    // Calculer des statistiques
    const avgApy = pools.reduce((sum, p) => sum + p.apy, 0) / pools.length;
    const totalTvl = pools.reduce((sum, p) => sum + p.tvlUsd, 0);
    const stablecoinCount = pools.filter(p => p.stablecoin).length;
    
    const chainDistribution = pools.reduce((acc, p) => {
      acc[p.chain] = (acc[p.chain] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const userPrompt = `Analyse ces statistiques du march√© DeFi:

- Nombre total de pools: ${pools.length}
- APY moyen: ${avgApy.toFixed(2)}%
- TVL total: $${(totalTvl / 1e9).toFixed(2)}B
- Pools stablecoins: ${stablecoinCount} (${((stablecoinCount / pools.length) * 100).toFixed(1)}%)
- Distribution par cha√Æne: ${JSON.stringify(chainDistribution, null, 2)}

Donne des insights sur:
1. Les tendances actuelles du march√©
2. Les opportunit√©s √† saisir
3. Les risques √† surveiller
4. Les recommandations strat√©giques`;

    return await this.sendRequest(userPrompt, systemInstruction);
  }

  /**
   * √âvalue le risque d'un pool sp√©cifique
   */
  async evaluatePoolRisk(pool: Pool): Promise<string> {
    const systemInstruction = `Tu es un expert en gestion des risques DeFi. √âvalue les risques associ√©s √† ce pool de liquidit√©.`;
    
    const userPrompt = `√âvalue les risques de ce pool:

- Projet: ${pool.project}
- Symbole: ${pool.symbol}
- Chain: ${pool.chain}
- APY: ${pool.apy}% (Base: ${pool.apyBase || 0}%, Rewards: ${pool.apyReward || 0}%)
- TVL: $${pool.tvlUsd.toLocaleString()}
- Stablecoin: ${pool.stablecoin ? 'Oui' : 'Non'}
- Risque IL: ${pool.ilRisk || 'Non sp√©cifi√©'}
- Exposition: ${pool.exposure || 'Non sp√©cifi√©e'}

Analyse:
1. Risque d'impermanent loss
2. Risque de smart contract
3. Risque de liquidit√©
4. Risque de d√©peg (si stablecoin)
5. Risque de protocole
6. Note globale de risque (1-10)`;

    return await this.sendRequest(userPrompt, systemInstruction);
  }

  /**
   * G√©n√®re une strat√©gie d'investissement personnalis√©e
   */
  async generateInvestmentStrategy(
    pools: Pool[],
    budget: number,
    riskProfile: 'conservative' | 'moderate' | 'aggressive'
  ): Promise<string> {
    const systemInstruction = `Tu es un conseiller financier DeFi. Cr√©e une strat√©gie d'investissement diversifi√©e.`;
    
    const userPrompt = `Cr√©e une strat√©gie d'investissement avec:

Budget: $${budget.toLocaleString()}
Profil de risque: ${riskProfile}

Pools disponibles: ${pools.length}

Recommande:
1. Allocation du budget entre les pools
2. Pourcentage par pool
3. Justification de chaque choix
4. Rendement estim√©
5. Niveau de risque global
6. Conseils de r√©√©quilibrage

Pools: ${JSON.stringify(pools.slice(0, 20).map(p => ({
  project: p.project,
  symbol: p.symbol,
  chain: p.chain,
  apy: p.apy,
  tvl: p.tvlUsd,
  stablecoin: p.stablecoin,
})), null, 2)}`;

    return await this.sendRequest(userPrompt, systemInstruction);
  }
}
